/* Generated by wayland-scanner 1.12.0 */

#ifndef INPUT_METHOD_CLIENT_PROTOCOL_H
#define INPUT_METHOD_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_input_method The input_method protocol
 * @section page_ifaces_input_method Interfaces
 * - @subpage page_iface_wl_input_method_context - input method context
 * - @subpage page_iface_wl_input_method - input method
 * - @subpage page_iface_wl_input_panel - interface for implementing keyboards
 * - @subpage page_iface_wl_input_panel_surface - 
 * @section page_copyright_input_method Copyright
 * <pre>
 *
 * Copyright Â© 2012, 2013 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 * </pre>
 */
struct wl_input_method;
struct wl_input_method_context;
struct wl_input_panel;
struct wl_input_panel_surface;
struct wl_keyboard;
struct wl_output;
struct wl_surface;

/**
 * @page page_iface_wl_input_method_context wl_input_method_context
 * @section page_iface_wl_input_method_context_desc Description
 *
 * Corresponds to a text input on input method side. An input method context
 * is created on text input activation on the input method side. It allows to
 * receive information about the text input from the application via events.
 * Input method contexts do not keep state after deactivation and should be
 * destroyed after deactivation is handled.
 *
 * Text is generally UTF-8 encoded, indices and lengths are in bytes.
 *
 * Serials are used to synchronize the state between the text input and
 * an input method. New serials are sent by the text input in the
 * commit_state request and are used by the input method to indicate
 * the known text input state in events like preedit_string, commit_string,
 * and keysym. The text input can then ignore events from the input method
 * which are based on an outdated state (for example after a reset).
 * @section page_iface_wl_input_method_context_api API
 * See @ref iface_wl_input_method_context.
 */
/**
 * @defgroup iface_wl_input_method_context The wl_input_method_context interface
 *
 * Corresponds to a text input on input method side. An input method context
 * is created on text input activation on the input method side. It allows to
 * receive information about the text input from the application via events.
 * Input method contexts do not keep state after deactivation and should be
 * destroyed after deactivation is handled.
 *
 * Text is generally UTF-8 encoded, indices and lengths are in bytes.
 *
 * Serials are used to synchronize the state between the text input and
 * an input method. New serials are sent by the text input in the
 * commit_state request and are used by the input method to indicate
 * the known text input state in events like preedit_string, commit_string,
 * and keysym. The text input can then ignore events from the input method
 * which are based on an outdated state (for example after a reset).
 */
extern const struct wl_interface wl_input_method_context_interface;
/**
 * @page page_iface_wl_input_method wl_input_method
 * @section page_iface_wl_input_method_desc Description
 *
 * An input method object is responsible to compose text in response to
 * input from hardware or virtual keyboards. There is one input method
 * object per seat. On activate there is a new input method context object
 * created which allows the input method to communicate with the text input.
 * @section page_iface_wl_input_method_api API
 * See @ref iface_wl_input_method.
 */
/**
 * @defgroup iface_wl_input_method The wl_input_method interface
 *
 * An input method object is responsible to compose text in response to
 * input from hardware or virtual keyboards. There is one input method
 * object per seat. On activate there is a new input method context object
 * created which allows the input method to communicate with the text input.
 */
extern const struct wl_interface wl_input_method_interface;
/**
 * @page page_iface_wl_input_panel wl_input_panel
 * @section page_iface_wl_input_panel_desc Description
 *
 * Only one client can bind this interface at a time.
 * @section page_iface_wl_input_panel_api API
 * See @ref iface_wl_input_panel.
 */
/**
 * @defgroup iface_wl_input_panel The wl_input_panel interface
 *
 * Only one client can bind this interface at a time.
 */
extern const struct wl_interface wl_input_panel_interface;
/**
 * @page page_iface_wl_input_panel_surface wl_input_panel_surface
 * @section page_iface_wl_input_panel_surface_api API
 * See @ref iface_wl_input_panel_surface.
 */
/**
 * @defgroup iface_wl_input_panel_surface The wl_input_panel_surface interface
 */
extern const struct wl_interface wl_input_panel_surface_interface;

/**
 * @ingroup iface_wl_input_method_context
 * @struct wl_input_method_context_listener
 */
struct wl_input_method_context_listener {
	/**
	 * surrounding text event
	 *
	 * The plain surrounding text around the input position. Cursor
	 * is the position in bytes within the surrounding text relative to
	 * the beginning of the text. Anchor is the position in bytes of
	 * the selection anchor within the surrounding text relative to the
	 * beginning of the text. If there is no selected text anchor is
	 * the same as cursor.
	 */
	void (*surrounding_text)(void *data,
				 struct wl_input_method_context *wl_input_method_context,
				 const char *text,
				 uint32_t cursor,
				 uint32_t anchor);
	/**
	 */
	void (*reset)(void *data,
		      struct wl_input_method_context *wl_input_method_context);
	/**
	 */
	void (*content_type)(void *data,
			     struct wl_input_method_context *wl_input_method_context,
			     uint32_t hint,
			     uint32_t purpose);
	/**
	 */
	void (*invoke_action)(void *data,
			      struct wl_input_method_context *wl_input_method_context,
			      uint32_t button,
			      uint32_t index);
	/**
	 * @param serial serial of text input state
	 */
	void (*commit_state)(void *data,
			     struct wl_input_method_context *wl_input_method_context,
			     uint32_t serial);
	/**
	 */
	void (*preferred_language)(void *data,
				   struct wl_input_method_context *wl_input_method_context,
				   const char *language);
};

/**
 * @ingroup wl_input_method_context_iface
 */
static inline int
wl_input_method_context_add_listener(struct wl_input_method_context *wl_input_method_context,
				     const struct wl_input_method_context_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) wl_input_method_context,
				     (void (**)(void)) listener, data);
}

#define WL_INPUT_METHOD_CONTEXT_DESTROY 0
#define WL_INPUT_METHOD_CONTEXT_COMMIT_STRING 1
#define WL_INPUT_METHOD_CONTEXT_PREEDIT_STRING 2
#define WL_INPUT_METHOD_CONTEXT_PREEDIT_STYLING 3
#define WL_INPUT_METHOD_CONTEXT_PREEDIT_CURSOR 4
#define WL_INPUT_METHOD_CONTEXT_DELETE_SURROUNDING_TEXT 5
#define WL_INPUT_METHOD_CONTEXT_CURSOR_POSITION 6
#define WL_INPUT_METHOD_CONTEXT_MODIFIERS_MAP 7
#define WL_INPUT_METHOD_CONTEXT_KEYSYM 8
#define WL_INPUT_METHOD_CONTEXT_GRAB_KEYBOARD 9
#define WL_INPUT_METHOD_CONTEXT_KEY 10
#define WL_INPUT_METHOD_CONTEXT_MODIFIERS 11
#define WL_INPUT_METHOD_CONTEXT_LANGUAGE 12
#define WL_INPUT_METHOD_CONTEXT_TEXT_DIRECTION 13

/**
 * @ingroup iface_wl_input_method_context
 */
#define WL_INPUT_METHOD_CONTEXT_SURROUNDING_TEXT_SINCE_VERSION 1
/**
 * @ingroup iface_wl_input_method_context
 */
#define WL_INPUT_METHOD_CONTEXT_RESET_SINCE_VERSION 1
/**
 * @ingroup iface_wl_input_method_context
 */
#define WL_INPUT_METHOD_CONTEXT_CONTENT_TYPE_SINCE_VERSION 1
/**
 * @ingroup iface_wl_input_method_context
 */
#define WL_INPUT_METHOD_CONTEXT_INVOKE_ACTION_SINCE_VERSION 1
/**
 * @ingroup iface_wl_input_method_context
 */
#define WL_INPUT_METHOD_CONTEXT_COMMIT_STATE_SINCE_VERSION 1
/**
 * @ingroup iface_wl_input_method_context
 */
#define WL_INPUT_METHOD_CONTEXT_PREFERRED_LANGUAGE_SINCE_VERSION 1

/**
 * @ingroup iface_wl_input_method_context
 */
#define WL_INPUT_METHOD_CONTEXT_DESTROY_SINCE_VERSION 1
/**
 * @ingroup iface_wl_input_method_context
 */
#define WL_INPUT_METHOD_CONTEXT_COMMIT_STRING_SINCE_VERSION 1
/**
 * @ingroup iface_wl_input_method_context
 */
#define WL_INPUT_METHOD_CONTEXT_PREEDIT_STRING_SINCE_VERSION 1
/**
 * @ingroup iface_wl_input_method_context
 */
#define WL_INPUT_METHOD_CONTEXT_PREEDIT_STYLING_SINCE_VERSION 1
/**
 * @ingroup iface_wl_input_method_context
 */
#define WL_INPUT_METHOD_CONTEXT_PREEDIT_CURSOR_SINCE_VERSION 1
/**
 * @ingroup iface_wl_input_method_context
 */
#define WL_INPUT_METHOD_CONTEXT_DELETE_SURROUNDING_TEXT_SINCE_VERSION 1
/**
 * @ingroup iface_wl_input_method_context
 */
#define WL_INPUT_METHOD_CONTEXT_CURSOR_POSITION_SINCE_VERSION 1
/**
 * @ingroup iface_wl_input_method_context
 */
#define WL_INPUT_METHOD_CONTEXT_MODIFIERS_MAP_SINCE_VERSION 1
/**
 * @ingroup iface_wl_input_method_context
 */
#define WL_INPUT_METHOD_CONTEXT_KEYSYM_SINCE_VERSION 1
/**
 * @ingroup iface_wl_input_method_context
 */
#define WL_INPUT_METHOD_CONTEXT_GRAB_KEYBOARD_SINCE_VERSION 1
/**
 * @ingroup iface_wl_input_method_context
 */
#define WL_INPUT_METHOD_CONTEXT_KEY_SINCE_VERSION 1
/**
 * @ingroup iface_wl_input_method_context
 */
#define WL_INPUT_METHOD_CONTEXT_MODIFIERS_SINCE_VERSION 1
/**
 * @ingroup iface_wl_input_method_context
 */
#define WL_INPUT_METHOD_CONTEXT_LANGUAGE_SINCE_VERSION 1
/**
 * @ingroup iface_wl_input_method_context
 */
#define WL_INPUT_METHOD_CONTEXT_TEXT_DIRECTION_SINCE_VERSION 1

/** @ingroup iface_wl_input_method_context */
static inline void
wl_input_method_context_set_user_data(struct wl_input_method_context *wl_input_method_context, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) wl_input_method_context, user_data);
}

/** @ingroup iface_wl_input_method_context */
static inline void *
wl_input_method_context_get_user_data(struct wl_input_method_context *wl_input_method_context)
{
	return wl_proxy_get_user_data((struct wl_proxy *) wl_input_method_context);
}

static inline uint32_t
wl_input_method_context_get_version(struct wl_input_method_context *wl_input_method_context)
{
	return wl_proxy_get_version((struct wl_proxy *) wl_input_method_context);
}

/**
 * @ingroup iface_wl_input_method_context
 */
static inline void
wl_input_method_context_destroy(struct wl_input_method_context *wl_input_method_context)
{
	wl_proxy_marshal((struct wl_proxy *) wl_input_method_context,
			 WL_INPUT_METHOD_CONTEXT_DESTROY);

	wl_proxy_destroy((struct wl_proxy *) wl_input_method_context);
}

/**
 * @ingroup iface_wl_input_method_context
 *
 * Send the commit string text for insertion to the application.
 *
 * The text to commit could be either just a single character after a key
 * press or the result of some composing (pre-edit). It could be also an
 * empty text when some text should be removed (see
 * delete_surrounding_text) or when the input cursor should be moved (see
 * cursor_position).
 *
 * Any previously set composing text will be removed.
 */
static inline void
wl_input_method_context_commit_string(struct wl_input_method_context *wl_input_method_context, uint32_t serial, const char *text)
{
	wl_proxy_marshal((struct wl_proxy *) wl_input_method_context,
			 WL_INPUT_METHOD_CONTEXT_COMMIT_STRING, serial, text);
}

/**
 * @ingroup iface_wl_input_method_context
 *
 * Send the pre-edit string text to the application text input.
 *
 * The commit text can be used to replace the preedit text on reset (for
 * example on unfocus).
 *
 * Also previously sent preedit_style and preedit_cursor requests are
 * processed bt the text_input also.
 */
static inline void
wl_input_method_context_preedit_string(struct wl_input_method_context *wl_input_method_context, uint32_t serial, const char *text, const char *commit)
{
	wl_proxy_marshal((struct wl_proxy *) wl_input_method_context,
			 WL_INPUT_METHOD_CONTEXT_PREEDIT_STRING, serial, text, commit);
}

/**
 * @ingroup iface_wl_input_method_context
 *
 * Sets styling information on composing text. The style is applied for
 * length in bytes from index relative to the beginning of
 * the composing text (as byte offset). Multiple styles can
 * be applied to a composing text.
 *
 * This request should be sent before sending preedit_string request.
 */
static inline void
wl_input_method_context_preedit_styling(struct wl_input_method_context *wl_input_method_context, uint32_t index, uint32_t length, uint32_t style)
{
	wl_proxy_marshal((struct wl_proxy *) wl_input_method_context,
			 WL_INPUT_METHOD_CONTEXT_PREEDIT_STYLING, index, length, style);
}

/**
 * @ingroup iface_wl_input_method_context
 *
 * Sets the cursor position inside the composing text (as byte offset)
 * relative to the start of the composing text.
 *
 * When index is negative no cursor should be displayed.
 *
 * This request should be sent before sending preedit_string request.
 */
static inline void
wl_input_method_context_preedit_cursor(struct wl_input_method_context *wl_input_method_context, int32_t index)
{
	wl_proxy_marshal((struct wl_proxy *) wl_input_method_context,
			 WL_INPUT_METHOD_CONTEXT_PREEDIT_CURSOR, index);
}

/**
 * @ingroup iface_wl_input_method_context
 *
 * This request will be handled on text_input side as part of a directly
 * following commit_string request.
 */
static inline void
wl_input_method_context_delete_surrounding_text(struct wl_input_method_context *wl_input_method_context, int32_t index, uint32_t length)
{
	wl_proxy_marshal((struct wl_proxy *) wl_input_method_context,
			 WL_INPUT_METHOD_CONTEXT_DELETE_SURROUNDING_TEXT, index, length);
}

/**
 * @ingroup iface_wl_input_method_context
 *
 * Sets the cursor and anchor to a new position. Index is the new cursor
 * position in bytes (when >= 0 relative to the end of inserted text
 * else relative to beginning of inserted text). Anchor is the new anchor
 * position in bytes (when >= 0 relative to the end of inserted text, else
 * relative to beginning of inserted text). When there should be no
 * selected text anchor should be the same as index.
 *
 * This request will be handled on text_input side as part of a directly
 * following commit_string request.
 */
static inline void
wl_input_method_context_cursor_position(struct wl_input_method_context *wl_input_method_context, int32_t index, int32_t anchor)
{
	wl_proxy_marshal((struct wl_proxy *) wl_input_method_context,
			 WL_INPUT_METHOD_CONTEXT_CURSOR_POSITION, index, anchor);
}

/**
 * @ingroup iface_wl_input_method_context
 */
static inline void
wl_input_method_context_modifiers_map(struct wl_input_method_context *wl_input_method_context, struct wl_array *map)
{
	wl_proxy_marshal((struct wl_proxy *) wl_input_method_context,
			 WL_INPUT_METHOD_CONTEXT_MODIFIERS_MAP, map);
}

/**
 * @ingroup iface_wl_input_method_context
 *
 * Notify when a key event was sent. Key events should not be used for
 * normal text input operations, which should be done with commit_string,
 * delete_surrounfing_text, etc. The key event follows the wl_keyboard key
 * event convention. Sym is a XKB keysym, state a wl_keyboard key_state.
 */
static inline void
wl_input_method_context_keysym(struct wl_input_method_context *wl_input_method_context, uint32_t serial, uint32_t time, uint32_t sym, uint32_t state, uint32_t modifiers)
{
	wl_proxy_marshal((struct wl_proxy *) wl_input_method_context,
			 WL_INPUT_METHOD_CONTEXT_KEYSYM, serial, time, sym, state, modifiers);
}

/**
 * @ingroup iface_wl_input_method_context
 *
 * Allows an input method to receive hardware keyboard input and process
 * key events to generate text events (with pre-edit) over the wire. This
 * allows input methods which compose multiple key events for inputting
 * text like it is done for CJK languages.
 */
static inline struct wl_keyboard *
wl_input_method_context_grab_keyboard(struct wl_input_method_context *wl_input_method_context)
{
	struct wl_proxy *keyboard;

	keyboard = wl_proxy_marshal_constructor((struct wl_proxy *) wl_input_method_context,
			 WL_INPUT_METHOD_CONTEXT_GRAB_KEYBOARD, &wl_keyboard_interface, NULL);

	return (struct wl_keyboard *) keyboard;
}

/**
 * @ingroup iface_wl_input_method_context
 *
 * Should be used when filtering key events with grab_keyboard.
 *
 * When the wl_keyboard::key event is not processed by the input
 * method itself and should be sent to the client instead, forward it
 * with this request. The arguments should be the ones from the
 * wl_keyboard::key event.
 *
 * For generating custom key events use the keysym request instead.
 */
static inline void
wl_input_method_context_key(struct wl_input_method_context *wl_input_method_context, uint32_t serial, uint32_t time, uint32_t key, uint32_t state)
{
	wl_proxy_marshal((struct wl_proxy *) wl_input_method_context,
			 WL_INPUT_METHOD_CONTEXT_KEY, serial, time, key, state);
}

/**
 * @ingroup iface_wl_input_method_context
 *
 * Should be used when filtering key events with grab_keyboard.
 *
 * When the wl_keyboard::modifiers event should be also send to the
 * client, forward it with this request. The arguments should be the ones
 * from the wl_keyboard::modifiers event.
 */
static inline void
wl_input_method_context_modifiers(struct wl_input_method_context *wl_input_method_context, uint32_t serial, uint32_t mods_depressed, uint32_t mods_latched, uint32_t mods_locked, uint32_t group)
{
	wl_proxy_marshal((struct wl_proxy *) wl_input_method_context,
			 WL_INPUT_METHOD_CONTEXT_MODIFIERS, serial, mods_depressed, mods_latched, mods_locked, group);
}

/**
 * @ingroup iface_wl_input_method_context
 */
static inline void
wl_input_method_context_language(struct wl_input_method_context *wl_input_method_context, uint32_t serial, const char *language)
{
	wl_proxy_marshal((struct wl_proxy *) wl_input_method_context,
			 WL_INPUT_METHOD_CONTEXT_LANGUAGE, serial, language);
}

/**
 * @ingroup iface_wl_input_method_context
 */
static inline void
wl_input_method_context_text_direction(struct wl_input_method_context *wl_input_method_context, uint32_t serial, uint32_t direction)
{
	wl_proxy_marshal((struct wl_proxy *) wl_input_method_context,
			 WL_INPUT_METHOD_CONTEXT_TEXT_DIRECTION, serial, direction);
}

/**
 * @ingroup iface_wl_input_method
 * @struct wl_input_method_listener
 */
struct wl_input_method_listener {
	/**
	 * activate event
	 *
	 * A text input was activated. Creates an input method context
	 * object which allows communication with the text input.
	 */
	void (*activate)(void *data,
			 struct wl_input_method *wl_input_method,
			 struct wl_input_method_context *id);
	/**
	 * deactivate event
	 *
	 * The text input corresponding to the context argument was
	 * deactivated. The input method context should be destroyed after
	 * deactivation is handled.
	 */
	void (*deactivate)(void *data,
			   struct wl_input_method *wl_input_method,
			   struct wl_input_method_context *context);
};

/**
 * @ingroup wl_input_method_iface
 */
static inline int
wl_input_method_add_listener(struct wl_input_method *wl_input_method,
			     const struct wl_input_method_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) wl_input_method,
				     (void (**)(void)) listener, data);
}

/**
 * @ingroup iface_wl_input_method
 */
#define WL_INPUT_METHOD_ACTIVATE_SINCE_VERSION 1
/**
 * @ingroup iface_wl_input_method
 */
#define WL_INPUT_METHOD_DEACTIVATE_SINCE_VERSION 1


/** @ingroup iface_wl_input_method */
static inline void
wl_input_method_set_user_data(struct wl_input_method *wl_input_method, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) wl_input_method, user_data);
}

/** @ingroup iface_wl_input_method */
static inline void *
wl_input_method_get_user_data(struct wl_input_method *wl_input_method)
{
	return wl_proxy_get_user_data((struct wl_proxy *) wl_input_method);
}

static inline uint32_t
wl_input_method_get_version(struct wl_input_method *wl_input_method)
{
	return wl_proxy_get_version((struct wl_proxy *) wl_input_method);
}

/** @ingroup iface_wl_input_method */
static inline void
wl_input_method_destroy(struct wl_input_method *wl_input_method)
{
	wl_proxy_destroy((struct wl_proxy *) wl_input_method);
}

#define WL_INPUT_PANEL_GET_INPUT_PANEL_SURFACE 0


/**
 * @ingroup iface_wl_input_panel
 */
#define WL_INPUT_PANEL_GET_INPUT_PANEL_SURFACE_SINCE_VERSION 1

/** @ingroup iface_wl_input_panel */
static inline void
wl_input_panel_set_user_data(struct wl_input_panel *wl_input_panel, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) wl_input_panel, user_data);
}

/** @ingroup iface_wl_input_panel */
static inline void *
wl_input_panel_get_user_data(struct wl_input_panel *wl_input_panel)
{
	return wl_proxy_get_user_data((struct wl_proxy *) wl_input_panel);
}

static inline uint32_t
wl_input_panel_get_version(struct wl_input_panel *wl_input_panel)
{
	return wl_proxy_get_version((struct wl_proxy *) wl_input_panel);
}

/** @ingroup iface_wl_input_panel */
static inline void
wl_input_panel_destroy(struct wl_input_panel *wl_input_panel)
{
	wl_proxy_destroy((struct wl_proxy *) wl_input_panel);
}

/**
 * @ingroup iface_wl_input_panel
 */
static inline struct wl_input_panel_surface *
wl_input_panel_get_input_panel_surface(struct wl_input_panel *wl_input_panel, struct wl_surface *surface)
{
	struct wl_proxy *id;

	id = wl_proxy_marshal_constructor((struct wl_proxy *) wl_input_panel,
			 WL_INPUT_PANEL_GET_INPUT_PANEL_SURFACE, &wl_input_panel_surface_interface, NULL, surface);

	return (struct wl_input_panel_surface *) id;
}

#ifndef WL_INPUT_PANEL_SURFACE_POSITION_ENUM
#define WL_INPUT_PANEL_SURFACE_POSITION_ENUM
enum wl_input_panel_surface_position {
	WL_INPUT_PANEL_SURFACE_POSITION_CENTER_BOTTOM = 0,
};
#endif /* WL_INPUT_PANEL_SURFACE_POSITION_ENUM */

#define WL_INPUT_PANEL_SURFACE_SET_TOPLEVEL 0
#define WL_INPUT_PANEL_SURFACE_SET_OVERLAY_PANEL 1


/**
 * @ingroup iface_wl_input_panel_surface
 */
#define WL_INPUT_PANEL_SURFACE_SET_TOPLEVEL_SINCE_VERSION 1
/**
 * @ingroup iface_wl_input_panel_surface
 */
#define WL_INPUT_PANEL_SURFACE_SET_OVERLAY_PANEL_SINCE_VERSION 1

/** @ingroup iface_wl_input_panel_surface */
static inline void
wl_input_panel_surface_set_user_data(struct wl_input_panel_surface *wl_input_panel_surface, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) wl_input_panel_surface, user_data);
}

/** @ingroup iface_wl_input_panel_surface */
static inline void *
wl_input_panel_surface_get_user_data(struct wl_input_panel_surface *wl_input_panel_surface)
{
	return wl_proxy_get_user_data((struct wl_proxy *) wl_input_panel_surface);
}

static inline uint32_t
wl_input_panel_surface_get_version(struct wl_input_panel_surface *wl_input_panel_surface)
{
	return wl_proxy_get_version((struct wl_proxy *) wl_input_panel_surface);
}

/** @ingroup iface_wl_input_panel_surface */
static inline void
wl_input_panel_surface_destroy(struct wl_input_panel_surface *wl_input_panel_surface)
{
	wl_proxy_destroy((struct wl_proxy *) wl_input_panel_surface);
}

/**
 * @ingroup iface_wl_input_panel_surface
 *
 * A keyboard surface is only shown when a text input is active.
 */
static inline void
wl_input_panel_surface_set_toplevel(struct wl_input_panel_surface *wl_input_panel_surface, struct wl_output *output, uint32_t position)
{
	wl_proxy_marshal((struct wl_proxy *) wl_input_panel_surface,
			 WL_INPUT_PANEL_SURFACE_SET_TOPLEVEL, output, position);
}

/**
 * @ingroup iface_wl_input_panel_surface
 *
 * An overlay panel is shown near the input cursor above the application
 * window when a text input is active.
 */
static inline void
wl_input_panel_surface_set_overlay_panel(struct wl_input_panel_surface *wl_input_panel_surface)
{
	wl_proxy_marshal((struct wl_proxy *) wl_input_panel_surface,
			 WL_INPUT_PANEL_SURFACE_SET_OVERLAY_PANEL);
}

#ifdef  __cplusplus
}
#endif

#endif
