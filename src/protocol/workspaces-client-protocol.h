/* Generated by wayland-scanner 1.12.0 */

#ifndef WORKSPACES_CLIENT_PROTOCOL_H
#define WORKSPACES_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_workspaces The workspaces protocol
 * @section page_ifaces_workspaces Interfaces
 * - @subpage page_iface_workspace_manager - workspaces manager
 */
struct wl_surface;
struct workspace_manager;

/**
 * @page page_iface_workspace_manager workspace_manager
 * @section page_iface_workspace_manager_desc Description
 *
 * An interface for managing surfaces in workspaces.
 * @section page_iface_workspace_manager_api API
 * See @ref iface_workspace_manager.
 */
/**
 * @defgroup iface_workspace_manager The workspace_manager interface
 *
 * An interface for managing surfaces in workspaces.
 */
extern const struct wl_interface workspace_manager_interface;

/**
 * @ingroup iface_workspace_manager
 * @struct workspace_manager_listener
 */
struct workspace_manager_listener {
	/**
	 * workspace state
	 *
	 * The current workspace state, such as current workspace and
	 * workspace count, has changed.
	 */
	void (*state)(void *data,
		      struct workspace_manager *workspace_manager,
		      uint32_t current,
		      uint32_t count);
};

/**
 * @ingroup workspace_manager_iface
 */
static inline int
workspace_manager_add_listener(struct workspace_manager *workspace_manager,
			       const struct workspace_manager_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) workspace_manager,
				     (void (**)(void)) listener, data);
}

#define WORKSPACE_MANAGER_MOVE_SURFACE 0

/**
 * @ingroup iface_workspace_manager
 */
#define WORKSPACE_MANAGER_STATE_SINCE_VERSION 1

/**
 * @ingroup iface_workspace_manager
 */
#define WORKSPACE_MANAGER_MOVE_SURFACE_SINCE_VERSION 1

/** @ingroup iface_workspace_manager */
static inline void
workspace_manager_set_user_data(struct workspace_manager *workspace_manager, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) workspace_manager, user_data);
}

/** @ingroup iface_workspace_manager */
static inline void *
workspace_manager_get_user_data(struct workspace_manager *workspace_manager)
{
	return wl_proxy_get_user_data((struct wl_proxy *) workspace_manager);
}

static inline uint32_t
workspace_manager_get_version(struct workspace_manager *workspace_manager)
{
	return wl_proxy_get_version((struct wl_proxy *) workspace_manager);
}

/** @ingroup iface_workspace_manager */
static inline void
workspace_manager_destroy(struct workspace_manager *workspace_manager)
{
	wl_proxy_destroy((struct wl_proxy *) workspace_manager);
}

/**
 * @ingroup iface_workspace_manager
 *
 * Move the given surface to the specified workspace.
 */
static inline void
workspace_manager_move_surface(struct workspace_manager *workspace_manager, struct wl_surface *surface, uint32_t workspace)
{
	wl_proxy_marshal((struct wl_proxy *) workspace_manager,
			 WORKSPACE_MANAGER_MOVE_SURFACE, surface, workspace);
}

#ifdef  __cplusplus
}
#endif

#endif
